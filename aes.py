Sbox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
]

InvSbox = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
]

Rcon = [
    [0x00, 0x00, 0x00, 0x00],
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1b, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00],
]


class CipherAES:
    def __init__(self, key: int) -> None:
        key_bit_length = key.bit_length()
        if key_bit_length not in (128, 192, 256):
            raise ValueError("bad key, length: {}".format(key_bit_length))

        self.key = key.to_bytes(
            key_bit_length // 8, byteorder="big"
        )  # cipher key (128, 192, or 256 bits)
        self.Nk = key_bit_length // 32
        self.Nb = 4
        self.Nr = 6 + self.Nk  # number rounds

    def encrypt(self, msg: str) -> list:
        msg = msg.encode("utf8")

        chunk_size = 16 # byte
        msg_len = len(msg)
        empty_len = (chunk_size - msg_len % chunk_size) % chunk_size
        msg = msg + bytes((0 for i in range(empty_len)))

        chunks = [
            bytearray(msg[i : i + chunk_size])
            for i in range(0, msg_len + empty_len, chunk_size)
        ]

        return [x for x in bytes.join(b"", map(self._encrypt_chunk, chunks))]

    def _encrypt_chunk(self, chunk: bytearray) -> bytearray:
        keys = self._key_expansion()

        chunk = self._add_round_key(chunk, keys[0])

        for i in range(1, self.Nr - 1):
            chunk = self._sub_bytes(chunk)
            chunk = self._shift_rows(chunk)
            chunk = self._mix_columns(chunk)
            chunk = self._add_round_key(chunk, keys[i])

        chunk = self._sub_bytes(chunk)
        chunk = self._shift_rows(chunk)
        chunk = self._add_round_key(chunk, keys[self.Nr - 1])

        return chunk

    def decrypt(self, msg: list) -> str:
        chunk_size = 16     # byte
        msg_len = len(msg)
        if msg_len % chunk_size != 0:
            raise ValueError(
                "bad msg, msg_len: {}, chunk_size: {}".format(msg_len, chunk_size)
            )

        chunks = [
            bytearray(msg[i: i + chunk_size]) for i in range(0, msg_len, chunk_size)
        ]

        return (
            bytes.join(b"", map(self._decrypt_chunk, chunks)).replace(b"\0", b"")
        ).decode("utf8")

    def _decrypt_chunk(self, chunk: bytearray) -> bytearray:
        keys = self._key_expansion()

        chunk = self._add_round_key(chunk, keys[self.Nr - 1])

        for i in range(self.Nr - 2, 0, -1):
            chunk = self._inv_shift_rows(chunk)
            chunk = self._inv_sub_bytes(chunk)
            chunk = self._add_round_key(chunk, keys[i])
            chunk = self._inv_mix_columns(chunk)

        chunk = self._inv_shift_rows(chunk)
        chunk = self._inv_sub_bytes(chunk)
        chunk = self._add_round_key(chunk, keys[0])

        return chunk

    def _sub_bytes(self, chunk: bytearray) -> bytearray:
        for i in range(len(chunk)):
            chunk[i] = Sbox[chunk[i]]

        return chunk

    def _inv_sub_bytes(self, chunk: bytearray) -> bytearray:
        for i in range(len(chunk)):
            chunk[i] = InvSbox[chunk[i]]

        return chunk

    def _shift_rows(self, chunk: bytearray) -> bytearray:
        chunk = (
            chunk[0:4]
            + chunk[5:8]
            + chunk[4:5]
            + chunk[10:12]
            + chunk[8:10]
            + chunk[15:16]
            + chunk[12:15]
        )

        return chunk

    def _inv_shift_rows(self, chunk: bytearray) -> bytearray:
        chunk = (
            chunk[0:4]
            + chunk[7:8]
            + chunk[4:7]
            + chunk[10:12]
            + chunk[8:10]
            + chunk[13:16]
            + chunk[12:13]
        )

        return chunk

    def _mix_columns(self, chunk: bytearray) -> bytearray:
        for i in range(4):
            chunk[i], chunk[i + 4], chunk[i + 8], chunk[i + 12] = (
                self.mul(2, chunk[i])
                ^ self.mul(3, chunk[i + 4])
                ^ self.mul(1, chunk[i + 8])
                ^ self.mul(1, chunk[i + 12]),
                self.mul(1, chunk[i])
                ^ self.mul(2, chunk[i + 4])
                ^ self.mul(3, chunk[i + 8])
                ^ self.mul(1, chunk[i + 12]),
                self.mul(1, chunk[i])
                ^ self.mul(1, chunk[i + 4])
                ^ self.mul(2, chunk[i + 8])
                ^ self.mul(3, chunk[i + 12]),
                self.mul(3, chunk[i])
                ^ self.mul(1, chunk[i + 4])
                ^ self.mul(1, chunk[i + 8])
                ^ self.mul(2, chunk[i + 12]),
            )

        return chunk

    def _inv_mix_columns(self, chunk: bytearray) -> bytearray:
        for i in range(4):
            chunk[i], chunk[i + 4], chunk[i + 8], chunk[i + 12] = (
                self.mul(14, chunk[i])
                ^ self.mul(11, chunk[i + 4])
                ^ self.mul(13, chunk[i + 8])
                ^ self.mul(9, chunk[i + 12]),
                self.mul(9, chunk[i])
                ^ self.mul(14, chunk[i + 4])
                ^ self.mul(11, chunk[i + 8])
                ^ self.mul(13, chunk[i + 12]),
                self.mul(13, chunk[i])
                ^ self.mul(9, chunk[i + 4])
                ^ self.mul(14, chunk[i + 8])
                ^ self.mul(11, chunk[i + 12]),
                self.mul(11, chunk[i])
                ^ self.mul(13, chunk[i + 4])
                ^ self.mul(9, chunk[i + 8])
                ^ self.mul(14, chunk[i + 12]),
            )

        return chunk

    def mul(self, a: int, b: int) -> int:
        result = 0
        first = a
        current = b & 0xFF

        while first != 0:
            if (first & 0x01) != 0:
                result ^= current
            first >>= 1
            current = self.times2(current)

        return result & 0xFF

    def times2(self, x: int) -> int:
        result = x << 1

        if (x & 0x80) != 0:
            result ^= 0x1B

        return result & 0xFF

    def _add_round_key(self, chunk: bytearray, key: bytearray) -> bytearray:
        return self._xor(chunk, key)

    def _key_expansion(self) -> list:
        i = 0
        key_parts = [bytearray(self.key[i : i + 4]) for i in range(0, self.Nk * 4, 4)]

        for i in range(self.Nk, self.Nb * (self.Nr + 1)):
            temp = key_parts[i - 1]
            if i % self.Nk == 0:
                temp = self._rot_word(temp)
                temp = self._sub_word(temp)
                temp = self._xor(temp, Rcon[i // self.Nk])
            elif self.Nk > 6 and i % self.Nk == 4:
                temp = self._sub_word(temp)

            key_parts.append(self._xor(key_parts[i - self.Nk], temp))

        keys = [
            key_parts[i] + key_parts[i + 1] + key_parts[i + 2] + key_parts[i + 3]
            for i in range(0, len(key_parts), 4)
        ]

        return keys

    def _rot_word(self, word: bytearray) -> bytearray:
        return word[1:4] + word[0:1]

    def _sub_word(self, word: bytearray) -> bytearray:
        for i in range(4):
            word[i] = Sbox[word[i]]

        return word

    def _xor(self, a: bytearray, b: bytearray) -> bytearray:
        return bytearray(map(lambda x: x[0] ^ x[1], zip(a, b)))


# tests
msg = "Hi, it's ascii text + русские буквы"
keys = [
    243302991307203860003426763194210095643,  # 128 bits
    3480299736719771887772948464190228533233280192811212880921,  # 192 bits
    94801791330196318114321998281732765886580595520022842096595599436582419187543,  # 256 bits
]

for key in keys:
    cipher = CipherAES(key)
    encrypt_msg = cipher.encrypt(msg)
    decrypt_msg = cipher.decrypt(encrypt_msg)
    assert msg == decrypt_msg
